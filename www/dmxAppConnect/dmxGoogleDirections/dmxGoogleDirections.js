/*!
 DMXzone Google Directions
 Version: 1.0.2
 (c) 2021 DMXzone.com
 @build 2021-06-16 15:48:56
 */
dmx.Component("google-directions",{initialData:{routeIndex:0,routes:[],status:""},attributes:{map:{type:String,default:null},origin:{type:[Object,String],default:null},destination:{type:[Object,String],default:null},waypoints:{type:[Array,String],default:null},"travel-mode":{type:String,default:"DRIVING"},"unit-system":{type:String,default:"METRIC"},"departure-time":{type:Date,default:null},"arrival-time":{type:Date,default:null},"transit-modes":{type:Array,default:null},"transit-preference":{type:String,default:null},"show-directions":{type:Boolean,default:!1},"provide-alternatives":{type:Boolean,default:!1},"avoid-ferries":{type:Boolean,default:!1},"avoid-highways":{type:Boolean,default:!1},"avoid-tolls":{type:Boolean,default:!1},"optimize-waypoints":{type:Boolean,default:!1},draggable:{type:Boolean,default:!1},"dynamic-update":{type:Boolean,default:!1}},methods:{route:function(){this.route()},setRouteIndex:function(t){this.directions&&(this.set("routeIndex",t),this.renderer.setRouteIndex(t))}},events:{directionschanged:Event,routeindexchanged:Event,noresults:Event,success:Event,error:Event},render:function(t){this.target=document.getElementById(this.props.map),this.map=this.target&&this.target.dmxComponent&&this.target.dmxComponent.map,this.service=new google.maps.DirectionsService,this.renderer=new google.maps.DirectionsRenderer({draggable:this.props.draggable}),this.renderer.addListener("directions_changed",this.directionsChanged.bind(this)),this.renderer.addListener("routeindex_changed",this.routeindexChanged.bind(this)),this.route()},update:function(t){this.props.map&&!this.map&&(this.map=this.target&&this.target.dmxComponent&&this.target.dmxComponent.map),this.props.draggable!=t.draggable&&this.renderer.setOptions({draggable:this.props.draggable}),this.props["dynamic-update"]&&(JSON.stringify(this.props.origin)==JSON.stringify(t.origin)&&JSON.stringify(this.props.destination)==JSON.stringify(t.destination)&&JSON.stringify(this.props.waypoints)==JSON.stringify(t.waypoints)||this.route())},route:function(){if(this.props.origin&&this.props.destination){var t=this.props.origin,e=this.props.destination;Array.isArray(t)&&(t=t[0]),Array.isArray(e)&&(e=e[0]),this.props.origin.latitude&&this.props.origin.longitude?t={lat:+this.props.origin.latitude,lng:+this.props.origin.longitude}:t.lat&&t.lng&&(t.lat=+t.lat,t.lng=+t.lng),this.props.destination.latitude&&this.props.destination.longitude?e={lat:+this.props.destination.latitude,lng:+this.props.destination.longitude}:e.lat&&e.lng&&(e.lat=+e.lat,e.lng=+e.lng);var i={origin:t,destination:e,waypoints:this.getWaypoints(),optimizeWaypoints:this.props["optimize-waypoints"],travelMode:google.maps.TravelMode[this.props["travel-mode"]],unitSystem:google.maps.UnitSystem[this.props["unit-system"]],provideRouteAlternatives:this.props["provide-alternatives"],avoidFerries:this.props["avoid-ferries"],avoidHighways:this.props["avoid-highways"],avoidTolls:this.props["avoid-tolls"]};"TRANSIT"==this.props["travel-mode"]&&(i.transitOptions={},this.props["arrival-time"]&&(i.transitOptions.arrivalTime=new Date(this.props["arrival-time"])),this.props["departure-time"]&&(i.transitOptions.departureTime=new Date(this.props["departure-time"])),Array.isArray(this.props["transit-modes"])&&(i.transitOptions.modes=this.props["transit-modes"]),this.props["transit-preference"]&&(i.transitOptions.routingPreference=this.props["transit-preference"])),"DRIVING"==this.props["travel-mode"]&&this.props["departure-time"]&&(i.drivingOptions={},this.props["departure-time"]&&(i.drivingOptions.departureTime=new Date(this.props["departure-time"]))),this.service.route(i,this.updateRoute.bind(this)).catch(function(t){})}},getWaypoints:function(){return"string"==typeof this.props.waypoints&&(this.props.waypoints=this.props.waypoints.split(/\s*\|\s*/)),Array.isArray(this.props.waypoints)?this.props.waypoints.map(function(t){return t.lat&&(t.lat=+t.lat),t.lng&&(t.lng=+t.lng),{location:t}}):null},routeindexChanged:function(){this.set("routeIndex",this.renderer.getRouteIndex()),requestAnimationFrame(this.dispatchEvent.bind(this,"routeindexchanged"))},directionsChanged:function(){var t=this.renderer.getDirections();this.set("routes",t.routes.map(function(t,e){return{index:e,copyrights:t.copyrights,summary:t.summary,fare:t.fare?{currency:t.fare.currency,value:t.face.value}:null,totalMeters:t.legs.reduce(function(t,e){return t+=e.distance&&e.distance.value||0},0),totalSeconds:t.legs.reduce(function(t,e){return t+=e.duration&&e.duration.value||0},0),waypointsOrder:t.waypoint_order,legs:t.legs.map(function(t){return{arrivalDate:t.arrival_time&&t.arrival_time.value.toISOString(),departureDate:t.departure_time&&t.departure_time.value.toISOString(),arrival:t.arrival_time&&t.arrival_time.text,departure:t.departure_time&&t.departure_time.text,distance:t.distance.text,duration:t.duration.text,meters:t.distance.value,seconds:t.duration.value,start:t.start_address,end:t.end_address,steps:t.steps.map(function(t){var e={};return t.transit&&(e.arrival={stop:t.transit.arrival_stop.name,date:t.transit.arrival_time.value.toISOString(),time:t.transit.arrival_time.text},e.departure={stop:t.transit.departure_stop.name,date:t.transit.departure_time.value.toISOString(),time:t.transit.departure_time.text},e.headsign=t.transit.headsign,e.numStops=t.transit.num_stops,e.line=t.transit.line),{distance:t.distance.text,duration:t.duration.text,instructions:t.instructions,maneuver:t.maneuver,travelMode:t.travel_mode,transit:e}})}})}})),setTimeout(this.dispatchEvent.bind(this,"directionschanged"),100)},updateRoute:function(t,e){this.set("routeIndex",0),this.set("status",e),"OK"==e?(this.directions=t,this.props.map&&this.map?this.renderer.setMap(this.map):this.renderer.setMap(null),this.renderer.setDirections(t),this.props["show-directions"]&&this.renderer.setPanel(this.$node),requestAnimationFrame(this.dispatchEvent.bind(this,"success"))):(this.directions=null,this.set("routes",[]),"ZERO_RESULTS"==e?requestAnimationFrame(this.dispatchEvent.bind(this,"noresults")):requestAnimationFrame(this.dispatchEvent.bind(this,"error")))}}),dmx.Component("google-distance-matrix",{initialData:{status:"",results:[]},attributes:{origins:{type:[Array,String],default:null},destinations:{type:[Array,String],default:null},"travel-mode":{type:String,default:"DRIVING"},units:{type:String,default:"METRIC"},"avoid-highways":{type:Boolean,default:!1},"avoid-tolls":{type:Boolean,default:!1}},methods:{getDistance:function(t,e){this.getDistance(t,e)}},render:function(t){this.service=new google.maps.DistanceMatrixService,this.update({})},update:function(t){this.props.origins==t.origins&&this.props.destinations==t.destinations||this.getDistance(this.props.origins,this.props.destinations)},getDistance:function(t,e){t&&e&&("string"==typeof t&&(t=t.split(/\s*\|\/*/)),"string"==typeof e&&(e=e.split(/\s*\|\/*/)),this.service.getDistanceMatrix({origins:t,destinations:e,travelMode:this.props["travel-mode"],unitSystem:google.maps.UnitSystem[this.props.units],avoidHighways:this.props["avoid-highways"],avoidTolls:this.props["avoid-tolls"]},this.onResponse.bind(this)))},onResponse:function(t,e){if(this.set("status",e),"OK"==e){for(var i=[],s=t.originAddresses,r=t.destinationAddresses,n=0;n<s.length;n++)for(var a=t.rows[n].elements,o=0;o<a.length;o++){var p=a[o];i.push({origin:s[n],destination:r[o],distance:p.distance.text,duration:p.duration.text,meters:p.distance.value,seconds:p.duration.value})}this.set("results",i)}}});
//# sourceMappingURL=../maps/dmxGoogleDirections.js.map
